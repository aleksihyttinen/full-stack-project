{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["axios","require","default","App","props","state","locations","get","then","response","setState","data","catch","error","console","log","this","MapContainer","center","zoom","scrollWheelZoom","doubleClickZoom","whenCreated","map","on","e","post","latitude","latlng","lat","longitude","lng","prevState","err","TileLayer","attribution","url","location","Marker","position","Popup","id","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAGMA,EAAQC,EAAQ,IAASC,QAoEhBC,E,kDAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,UAAW,IAFT,E,qDAKnB,WAAqB,IAAD,OAClBN,EACGO,IAAI,cACJC,MAAK,SAACC,GAEL,EAAKC,SAAS,CAAEJ,UAAWG,EAASE,UAErCC,OAAM,SAACC,GAENC,QAAQC,IAAIF,Q,oBAIlB,WAAU,IAAD,OACCP,EAAcU,KAAKX,MAAnBC,UACR,OACE,eAACW,EAAA,EAAD,CACEC,OAAQ,CAAC,GAAI,GACbC,KAAM,EACNC,iBAAiB,EACjBC,iBAAiB,EACjBC,YAAa,SAACC,GACZA,EAAIC,GAAG,YAAY,SAACC,GAClBzB,EACG0B,KAAK,aAAc,CAClBC,SAAUF,EAAEG,OAAOC,IACnBC,UAAWL,EAAEG,OAAOG,MAErBvB,MAAK,SAACC,GAAD,OACJ,EAAKC,UAAS,SAACsB,GAAD,MAAgB,CAC5B1B,UAAU,GAAD,mBAAM0B,EAAU1B,WAAhB,CAA2BG,EAASE,cAGhDC,OAAM,SAACqB,GAAD,OAASnB,QAAQC,IAAIkB,UAjBpC,UAqBE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEL9B,EAAUiB,KAAI,SAACc,GAAD,OACb,8BACE,cAACC,EAAA,EAAD,CAEEC,SAAU,CAACF,EAASV,SAAUU,EAASP,WAFzC,SAIE,eAACU,EAAA,EAAD,WACG,OAASH,EAASI,GACnB,uBACC,aAAeJ,EAASV,SACzB,uBACC,cAAgBU,EAASP,cARvBO,EAASI,KAFRJ,EAASI,c,GAhDXC,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.104aaffd.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nconst axios = require(\"axios\").default;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { locations: [] };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"/locations\")\n      .then((response) => {\n        // handle success\n        this.setState({ locations: response.data });\n      })\n      .catch((error) => {\n        // handle error\n        console.log(error);\n      });\n  }\n\n  render() {\n    const { locations } = this.state;\n    return (\n      <MapContainer\n        center={[20, 0]}\n        zoom={2}\n        scrollWheelZoom={false}\n        doubleClickZoom={false}\n        whenCreated={(map) => {\n          map.on(\"dblclick\", (e) => {\n            axios\n              .post(\"/locations\", {\n                latitude: e.latlng.lat,\n                longitude: e.latlng.lng,\n              })\n              .then((response) =>\n                this.setState((prevState) => ({\n                  locations: [...prevState.locations, response.data],\n                }))\n              )\n              .catch((err) => console.log(err));\n          });\n        }}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {locations.map((location) => (\n          <div key={location.id}>\n            <Marker\n              key={location.id}\n              position={[location.latitude, location.longitude]}\n            >\n              <Popup>\n                {\"id: \" + location.id}\n                <br />\n                {\"latitude: \" + location.latitude}\n                <br />\n                {\"longitude: \" + location.longitude}\n              </Popup>\n            </Marker>\n          </div>\n        ))}\n      </MapContainer>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}